{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/nim/dev/code-challange/client/src/App.js\",\n    _s = $RefreshSig$();\n\n//React\nimport React, { useEffect, useState } from \"react\"; //Redux\n\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchMakesFromApi, fetchModelsFromApi, fetchVehiclesFromApi } from \"./features/car/carSlice\"; //lodash\n\nimport set from \"lodash.set\";\nimport foreach from \"lodash.foreach\";\nimport clonedeep from \"lodash.clonedeep\"; //Components\n\nimport Form from \"./components/Form\";\n/**\n *\n *\n * @return {*}\n */\n\nconst App = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    makes,\n    models,\n    vehicles,\n    status,\n    apiErrors\n  } = useSelector(state => state.cars);\n  const initialState = {};\n  const [requestObject, setRequestObject] = useState(initialState);\n  const [errorFetchedChecker, setErrorFetchedChecker] = useState(0);\n  const [otherErrorFetchedChecker, setotherOrrorFetchedChecker] = useState(0);\n  const [modelErrorFetchedChecker, setmodelErrorFetchedChecker] = useState(0);\n  /**\n   * function description\n   *\n   * @param {*} updates\n   */\n\n  const updateRequestObject = updates => {\n    const clonedRequestObject = clonedeep(requestObject);\n    foreach(updates, update => {\n      const name = update.name;\n      const value = update.value;\n      set(clonedRequestObject, name, value);\n    });\n    setRequestObject(clonedRequestObject);\n  };\n  /**\n   *\n   *\n   */\n\n\n  const resetState = () => {\n    setRequestObject(initialState);\n  };\n  /**\n   * fn descript\n   *\n   */\n\n\n  const getCarModels = () => {\n    if (requestObject.makes) {\n      dispatch(fetchModelsFromApi(requestObject.makes)).then(() => {//set loading status\n      }).catch(serializedError => {\n        setotherOrrorFetchedChecker(modelErrorFetchedChecker + 1);\n      });\n    }\n  };\n  /**\n   * fn descript\n   *\n   */\n\n\n  const getVehicles = () => {\n    if (requestObject.makes && requestObject.models) {\n      if (requestObject.models.length > 0) {\n        let queryParams = {\n          make: requestObject.makes,\n          model: requestObject.models\n        };\n        dispatch(fetchVehiclesFromApi(queryParams)).then(unwrapResult).then(() => {//set loading status\n        }).catch(serializedError => {\n          setotherOrrorFetchedChecker(otherErrorFetchedChecker + 1);\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (errorFetchedChecker < 3) {\n      dispatch(fetchMakesFromApi()).then(unwrapResult).then(() => {//set loading status\n      }).catch(serializedError => {\n        //Handle api errors + 503 re-try api fetch\n        setErrorFetchedChecker(errorFetchedChecker + 1);\n      });\n    }\n  }, [dispatch, errorFetchedChecker]);\n  useEffect(() => {\n    if (modelErrorFetchedChecker < 3) {\n      let queryParams = requestObject.makes;\n      dispatch(fetchVehiclesFromApi(queryParams)).then(unwrapResult).then(() => {//set loading status\n      }).catch(serializedError => {\n        setmodelErrorFetchedChecker(modelErrorFetchedChecker + 1);\n      });\n    }\n  }, [dispatch, modelErrorFetchedChecker]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      requestObject: requestObject,\n      status: status,\n      makes: makes,\n      models: models,\n      vehicles: vehicles,\n      apiErrors: apiErrors,\n      getCarModels: getCarModels,\n      getVehicles: getVehicles,\n      updateRequestObject: updateRequestObject,\n      resetState: resetState\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"onbHCIbJTOvDXLaJrqQpfbK4nCY=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nim/dev/code-challange/client/src/App.js"],"names":["React","useEffect","useState","unwrapResult","useDispatch","useSelector","fetchMakesFromApi","fetchModelsFromApi","fetchVehiclesFromApi","set","foreach","clonedeep","Form","App","dispatch","makes","models","vehicles","status","apiErrors","state","cars","initialState","requestObject","setRequestObject","errorFetchedChecker","setErrorFetchedChecker","otherErrorFetchedChecker","setotherOrrorFetchedChecker","modelErrorFetchedChecker","setmodelErrorFetchedChecker","updateRequestObject","updates","clonedRequestObject","update","name","value","resetState","getCarModels","then","catch","serializedError","getVehicles","length","queryParams","make","model"],"mappings":"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","sourcesContent":["//React\nimport React, { useEffect, useState } from \"react\";\n\n//Redux\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  fetchMakesFromApi,\n  fetchModelsFromApi,\n  fetchVehiclesFromApi,\n} from \"./features/car/carSlice\";\n\n//lodash\nimport set from \"lodash.set\";\nimport foreach from \"lodash.foreach\";\nimport clonedeep from \"lodash.clonedeep\";\n\n//Components\nimport Form from \"./components/Form\";\n\n/**\n *\n *\n * @return {*}\n */\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const { makes, models, vehicles, status, apiErrors } = useSelector(\n    (state) => state.cars\n  );\n  const initialState = {};\n\n  const [requestObject, setRequestObject] = useState(initialState);\n  const [errorFetchedChecker, setErrorFetchedChecker] = useState(0);\n  const [otherErrorFetchedChecker, setotherOrrorFetchedChecker] = useState(0);\n  const [modelErrorFetchedChecker, setmodelErrorFetchedChecker] = useState(0);\n\n  /**\n   * function description\n   *\n   * @param {*} updates\n   */\n  const updateRequestObject = (updates) => {\n    const clonedRequestObject = clonedeep(requestObject);\n    foreach(updates, (update) => {\n      const name = update.name;\n      const value = update.value;\n      set(clonedRequestObject, name, value);\n    });\n    setRequestObject(clonedRequestObject);\n  };\n\n  /**\n   *\n   *\n   */\n  const resetState = () => {\n    setRequestObject(initialState);\n  };\n\n  /**\n   * fn descript\n   *\n   */\n  const getCarModels = () => {\n    if (requestObject.makes) {\n      dispatch(fetchModelsFromApi(requestObject.makes))\n        .then(() => {\n          //set loading status\n        })\n        .catch((serializedError) => {\n          setotherOrrorFetchedChecker(modelErrorFetchedChecker + 1);\n        });\n    }\n  };\n\n  /**\n   * fn descript\n   *\n   */\n  const getVehicles = () => {\n    if (requestObject.makes && requestObject.models) {\n      if (requestObject.models.length > 0) {\n        let queryParams = {\n          make: requestObject.makes,\n          model: requestObject.models,\n        };\n\n        dispatch(fetchVehiclesFromApi(queryParams))\n          .then(unwrapResult)\n          .then(() => {\n            //set loading status\n          })\n          .catch((serializedError) => {\n            setotherOrrorFetchedChecker(otherErrorFetchedChecker + 1);\n          });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (errorFetchedChecker < 3) {\n      dispatch(fetchMakesFromApi())\n        .then(unwrapResult)\n        .then(() => {\n          //set loading status\n        })\n        .catch((serializedError) => {\n          //Handle api errors + 503 re-try api fetch\n          setErrorFetchedChecker(errorFetchedChecker + 1);\n        });\n    }\n  }, [dispatch, errorFetchedChecker]);\n\n  useEffect(() => {\n    if (modelErrorFetchedChecker < 3) {\n      let queryParams = requestObject.makes;\n\n      dispatch(fetchVehiclesFromApi(queryParams))\n        .then(unwrapResult)\n        .then(() => {\n          //set loading status\n        })\n        .catch((serializedError) => {\n          setmodelErrorFetchedChecker(modelErrorFetchedChecker + 1);\n        });\n    }\n  }, [dispatch, modelErrorFetchedChecker]);\n\n  return (\n    <>\n      <Form\n        requestObject={requestObject}\n        status={status}\n        makes={makes}\n        models={models}\n        vehicles={vehicles}\n        apiErrors={apiErrors}\n        getCarModels={getCarModels}\n        getVehicles={getVehicles}\n        updateRequestObject={updateRequestObject}\n        resetState={resetState}\n      />\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}