{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const initialState = {\n  status: \"idle\",\n  models: null,\n  makes: [],\n  vehicles: null\n}; // Async thunk action\n\nexport const fetchMakesFromApi = createAsyncThunk(\"cars/fetchMakes\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios({\n      method: \"get\",\n      url: \"http://localhost:8080/api/makes\"\n    });\n    return response.data;\n  } catch (err) {\n    // any HTTP error is caught here\n    // can extend this implementation to customiz the error messages\n    // ex: dispatch(loadTodoError(\"Sorry can't talk to our servers right now\"));\n    // console.log(\"ERROR 5XXX & 400 MAKES!3\", err.response.status);\n    let errorObject = `MAKES ERROR: ${err.response.status}`;\n    return rejectWithValue(errorObject);\n  }\n});\nexport const fetchModelsFromApi = createAsyncThunk(\"cars/fetchModels\", async (makeId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(\"http://localhost:8080/api/models\", {\n      params: {\n        make: makeId\n      }\n    });\n    return response.data;\n  } catch (err) {\n    let errorObject = `MODELS ERROR: ${err.response.status}`;\n    return rejectWithValue(errorObject);\n  }\n});\nexport const fetchVehiclesFromApi = createAsyncThunk(\"cars/fetchVehicles\", async (queryParams, {\n  rejectWithValue\n}) => {\n  const {\n    make,\n    model\n  } = queryParams;\n\n  try {\n    const response = await axios.get(\"http://localhost:8080/api/vehicles\", {\n      params: {\n        make: make,\n        model: model\n      }\n    });\n    return response.data;\n  } catch (err) {\n    let errorObject = `VEHICLES ERROR: ${err.response.status}`;\n    return rejectWithValue(errorObject);\n  }\n}); //RTK Slice\n\nconst carSlice = createSlice({\n  name: \"car\",\n  initialState,\n  reducers: {\n    resetErrors: (state, {\n      payload\n    }) => {\n      state.loading = false;\n      state.apiErrors = null;\n    }\n  },\n  extraReducers: {\n    [fetchMakesFromApi.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.apiErrors = null;\n    },\n    [fetchMakesFromApi.fulfilled]: fetchMakesFromApiSuccessful,\n    [fetchMakesFromApi.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.apiErrors = action.payload;\n      state = initialState;\n    },\n    [fetchVehiclesFromApi.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.apiErrors = null;\n    },\n    [fetchVehiclesFromApi.fulfilled]: fetchVehiclesFromApiSuccessful,\n    [fetchVehiclesFromApi.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.apiErrors = action.payload;\n      state = initialState;\n    },\n    [fetchModelsFromApi.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.apiErrors = null;\n    },\n    [fetchModelsFromApi.fulfilled]: fetchModelsFromApiSuccessful,\n    [fetchModelsFromApi.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.apiErrors = action.payload;\n      state = initialState;\n    }\n  }\n});\n\nfunction fetchMakesFromApiSuccessful(state, action) {\n  state.makes = action.payload;\n  state.apiErrors = null;\n  state.status = \"successful\";\n}\n\nfunction fetchModelsFromApiSuccessful(state, action) {\n  state.models = action.payload;\n  state.apiErrors = null;\n  state.status = \"successful\";\n}\n\nfunction fetchVehiclesFromApiSuccessful(state, action) {\n  state.vehicles = action.payload;\n  state.apiErrors = null;\n  state.status = \"successful\";\n} // Three actions generated from the slice\n\n\nexport const {\n  resetErrors\n} = carSlice.actions;\nexport const clearErrors = () => async dispatch => {\n  dispatch(resetErrors());\n};\nexport default carSlice.reducer;","map":{"version":3,"sources":["/Users/nim/dev/code-challange/client/src/features/car/carSlice.js"],"names":["createAsyncThunk","createSlice","axios","initialState","status","models","makes","vehicles","fetchMakesFromApi","_","rejectWithValue","response","method","url","data","err","errorObject","fetchModelsFromApi","makeId","get","params","make","fetchVehiclesFromApi","queryParams","model","carSlice","name","reducers","resetErrors","state","payload","loading","apiErrors","extraReducers","pending","action","fulfilled","fetchMakesFromApiSuccessful","rejected","fetchVehiclesFromApiSuccessful","fetchModelsFromApiSuccessful","actions","clearErrors","dispatch","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const initialState = {\n  status: \"idle\",\n  models: null,\n  makes: [],\n  vehicles: null,\n};\n\n// Async thunk action\nexport const fetchMakesFromApi = createAsyncThunk(\n  \"cars/fetchMakes\",\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await axios({\n        method: \"get\",\n        url: \"http://localhost:8080/api/makes\",\n      });\n      return response.data;\n    } catch (err) {\n      \n      // any HTTP error is caught here\n      // can extend this implementation to customiz the error messages\n      // ex: dispatch(loadTodoError(\"Sorry can't talk to our servers right now\"));\n      // console.log(\"ERROR 5XXX & 400 MAKES!3\", err.response.status);\n      let errorObject = `MAKES ERROR: ${err.response.status}`;\n      return rejectWithValue(errorObject);\n    }\n  }\n);\n\nexport const fetchModelsFromApi = createAsyncThunk(\n  \"cars/fetchModels\",\n  async (makeId, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/models\", {\n        params: { make: makeId },\n      });\n      return response.data;\n    } catch (err) {\n      let errorObject = `MODELS ERROR: ${err.response.status}`;\n      return rejectWithValue(errorObject);\n    }\n  }\n);\n\nexport const fetchVehiclesFromApi = createAsyncThunk(\n  \"cars/fetchVehicles\",\n  async (queryParams, { rejectWithValue }) => {\n    const { make, model } = queryParams;\n    try {\n      const response = await axios.get(\"http://localhost:8080/api/vehicles\", {\n        params: { make: make, model: model },\n      });\n\n      return response.data;\n    } catch (err) {\n      let errorObject = `VEHICLES ERROR: ${err.response.status}`;\n      return rejectWithValue(errorObject);\n    }\n  }\n);\n\n//RTK Slice\nconst carSlice = createSlice({\n  name: \"car\",\n  initialState,\n  reducers: {\n    resetErrors: (state, { payload }) => {\n      state.loading = false;\n      state.apiErrors = null;\n    },\n  },\n  extraReducers: {\n    [fetchMakesFromApi.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.apiErrors = null;\n    },\n    [fetchMakesFromApi.fulfilled]: fetchMakesFromApiSuccessful,\n    [fetchMakesFromApi.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.apiErrors = action.payload;\n      state = initialState;\n    },\n    [fetchVehiclesFromApi.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.apiErrors = null;\n    },\n    [fetchVehiclesFromApi.fulfilled]: fetchVehiclesFromApiSuccessful,\n    [fetchVehiclesFromApi.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.apiErrors = action.payload;\n      state = initialState;\n    },\n    [fetchModelsFromApi.pending]: (state, action) => {\n      state.status = \"loading\";\n      state.apiErrors = null;\n    },\n    [fetchModelsFromApi.fulfilled]: fetchModelsFromApiSuccessful,\n    [fetchModelsFromApi.rejected]: (state, action) => {\n      state.status = \"failed\";\n      state.apiErrors = action.payload;\n      state = initialState;\n    },\n  },\n});\n\nfunction fetchMakesFromApiSuccessful(state, action) {\n  state.makes = action.payload;\n  state.apiErrors = null;\n  state.status = \"successful\";\n}\n\nfunction fetchModelsFromApiSuccessful(state, action) {\n  state.models = action.payload;\n  state.apiErrors = null;\n  state.status = \"successful\";\n}\n\nfunction fetchVehiclesFromApiSuccessful(state, action) {\n  state.vehicles = action.payload;\n  state.apiErrors = null;\n  state.status = \"successful\";\n}\n\n// Three actions generated from the slice\nexport const { resetErrors } = carSlice.actions;\n\nexport const clearErrors = () => async (dispatch) => {\n  dispatch(resetErrors());\n};\n\nexport default carSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}